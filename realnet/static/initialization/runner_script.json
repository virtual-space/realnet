{
  "items": [
    {
      "type": "RunnerScript",
      "name": "Default WordPress Sync Script",
      "attributes": {
        "script": "import json\nimport requests\nfrom urllib.parse import urljoin\nimport os\n\ndef get_wordpress_client():\n    \"\"\"Get WordPress API client\"\"\"\n    base_url = os.environ.get('REALNET_WORDPRESS_URL', 'http://wordpress:8081')\n    token = os.environ.get('REALNET_WORDPRESS_TOKEN')\n    return {\n        'base_url': base_url.rstrip('/'),\n        'headers': {\n            'Authorization': f'Bearer {token}',\n            'Content-Type': 'application/json'\n        }\n    }\n\ndef wordpress_request(method, endpoint, data=None):\n    \"\"\"Make WordPress API request\"\"\"\n    client = get_wordpress_client()\n    url = urljoin(client['base_url'], f'/wp-json/realnet/v1/{endpoint}')\n    response = requests.request(method, url, json=data, headers=client['headers'])\n    response.raise_for_status()\n    return response.json()\n\ndef handle_message(message):\n    \"\"\"Handle incoming message from MQTT topic\"\"\"\n    try:\n        # Parse message\n        data = json.loads(message)\n        action = data.get('action')\n        content_type = data.get('type')\n        content = data.get('content', {})\n\n        # Validate required fields\n        if not action or not content_type:\n            raise ValueError(\"Missing required fields: action and type\")\n\n        # Handle WordPress content sync\n        if content_type.startswith('websites.'):\n            sync_wordpress_content(action, content_type, content)\n        else:\n            publish({\n                'status': 'error',\n                'message': f'Unsupported content type: {content_type}'\n            })\n\n    except Exception as e:\n        publish({\n            'status': 'error',\n            'message': str(e)\n        })\n\ndef sync_wordpress_content(action, content_type, content):\n    \"\"\"Sync content with WordPress\"\"\"\n    try:\n        # Map content type to WordPress type\n        wp_type = content_type.split('.')[1]  # e.g. websites.page -> page\n        \n        # Make WordPress API request\n        response = wordpress_request('post', 'sync', {\n            'type': wp_type,\n            'action': action,\n            'data': content\n        })\n\n        # Publish response\n        publish({\n            'status': 'success',\n            'type': content_type,\n            'action': action,\n            'data': response\n        })\n\n    except Exception as e:\n        publish({\n            'status': 'error',\n            'type': content_type,\n            'action': action,\n            'message': str(e)\n        })"
      }
    }
  ]
}
